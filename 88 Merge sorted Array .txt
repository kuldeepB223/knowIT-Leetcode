Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

**********************************************************************************************************

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int index=0;
        for(int i=0; i<nums1.length; i++){
            for(int j=index; j<nums2.length; j++){
                if(nums1[i]==0){
                    nums1[i]=nums2[index];
                    index++;
                    break;
                }
            }
        }
        // int index=0;
        // for(int i=0; i<nums1.length; i++){
        //     if(nums1[i]==0){
        //         nums1[i]=nums2[index++];
        //     }
        // }
        Arrays.sort(nums1);
    }
}